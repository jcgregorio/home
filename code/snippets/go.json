{
  "sort": {
    "prefix": "sort",
    "body": [
      "type $1Slice []$1",
      "",
      "func (p $1Slice) Len() int           { return len(p) }",
      "func (p $1Slice) Less(i, j int) bool { return p[i] < p[j] }",
      "func (p $1Slice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }"
    ],
    "description": "sort"
  },
  "main": {
    "prefix": "main",
    "body": [
      "package main",
      "",
      "import \"fmt\"",
      "",
      "func main() {",
      "\t$0fmt.Println(\"Hello, 世界\")",
      "}"
    ],
    "description": "main"
  },
  "testing": {
    "prefix": "testing",
    "body": [
      "package $1",
      "",
      "import (",
      "\t\"testing\"",
      ")",
      "",
      "${0}"
    ],
    "description": "testing"
  },
  "got": {
    "prefix": "got",
    "body": [
      "if got, want := $1, $2; got != want {",
      "\tt.Errorf(\"$3: Got %v Want %v\", got, want)",
      "}"
    ],
    "description": "got"
  },
  "ok": {
    "prefix": "ok",
    "body": [
      "if $1, ok := $2[$3]; !ok {",
      "\t$4",
      "}"
    ],
    "description": "ok"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if err != nil {",
      "\t$0",
      "}"
    ],
    "description": "if "
  },
  "ife": {
    "prefix": "ife",
    "body": [
      "if err := $1;err != nil {",
      "\t$0",
      "}"
    ],
    "description": "if err"
  },
  "ifo": {
    "prefix": "ifo",
    "body": [
      "if $1, ok := $2[$3]; !ok {",
      "\t$0",
      "}"
    ],
    "description": "if ok"
  },
  "flags": {
    "prefix": "flags",
    "body": [
      "// flags",
      "var (",
      "\t$1 = flag.String(\"$1\", \"$2\", \"$3\")",
      "\t$0",
      ")"
    ],
    "description": "flags"
  },
  "enum": {
    "prefix": "enum",
    "body": [
      "type $1 string",
      "",
      "// $1 constants.",
      "const (",
      "\t$2 $1 = \"$3\"",
      "\t$0",
      ")"
    ],
    "description": "enum"
  },
  "tc": {
    "prefix": "tc",
    "body": [
      "\ttestCases := []struct {",
      "\t\tvalue    $1",
      "\t\texpected $2",
      "\t\tmessage  string",
      "\t}{",
      "\t\t{",
      "\t\t\tvalue:   $3,",
      "\t\t\texpected: $4,",
      "\t\t\tmessage: \"$5\",",
      "\t\t},",
      "\t}",
      "",
      "\tfor _, tc := range testCases {",
      "\t\tif got, want := $6(tc.value), tc.expected; got!=want {",
      "\t\t\tt.Errorf(\"Failed case Got %v Want %v: %s\", got, want, tc.message)",
      "\t\t}",
      "\t}"
    ],
    "description": "testcase"
  },
  "xml": {
    "prefix": "xml",
    "body": [
      "\\`xml:\"$1\"\\`"
    ],
    "description": "xml"
  },
  "datastore": {
    "prefix": "datastore",
    "body": [
      "\\`datastore:\"${1:displayName},noindex\"\\`"
    ],
    "description": "datastore field"
  },
  "test": {
    "prefix": "test",
    "body": [
      "\tfunc Test${1:name}(t *testing.T) {",
      "\t\tunittest.SmallTest(t)",
      "\t\t$0",
      "\t}"
    ]
  }
}