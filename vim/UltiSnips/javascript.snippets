#############
# JS        #
#############

snippet for "for (...) {...} (counting up)" b
for (let ${1:i} = 0; $1 < $2; $1++) {
	${VISUAL}$0
}
endsnippet

snippet ford "for (...) {...} (counting down, faster)" b
for (let ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${VISUAL}$0
}
endsnippet

snippet fun "function (fun)"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet


snippet clos "Immediately-Invoked Closure"
(function () {
	$0
})();
endsnippet

snippet ae "ele.addEventListener"
$$$('#$1').addEventListener('$2', function(e) {
	$0
});
endsnippet

snippet ele "$$$('#id')."
$$$('#$1').$0
endsnippet

snippet van "VanillaJS element definition"
/**
 * @module $1/$2
 * @description <h2><code>$2</code></h2>
 *
 * @evt
 *
 * @attr {boolean} $3 - 
 *
 * @example
 */
import { upgradeProperty } from 'skia-elements/upgrade-property'

window.customElements.define('$2', class extends HTMLElement {
	static get observedAttributes() {
		return ['$3'];
	}

	connectedCallback() {
		upgradeProperty(this, '$3');
		this.addEventListener('$4', this);
	}

	disconnectedCallback() {
		this.removeEventListener('$4', this);
	}

  /** @prop {boolean} $3 Mirrors the $3 attribute. */
	get $3() { return this.hasAttribute('$3'); }
	set $3(val) {
		if (val) {
			this.setAttribute('$3', '');
		} else {
			this.removeAttribute('$3');
		}
	}

	handleEvent(e) {
		switch (e.type) {
			case '$4':
				break;
			default:
		}
	}

	attributeChangedCallback(name, oldValue, newValue) {
		let isTrue = newValue !== null;
		switch (name) {
			case '$3':
				break;
		}
	}
});
endsnippet

snippet vanlit "VanillaJS+lit-extended element definition"
/**
 * @module $1/$2
 * @description <h2><code>$2</code></h2>
 *
 * @evt
 *
 * @attr
 *
 * @example
 */
import { html, render } from 'lit-html'

const template = (ele) => html\`\`;

window.customElements.define('$2', class extends HTMLElement {
	constructor() {
		super();
	}

	connectedCallback() {
		this._render();
	}

	disconnectedCallback() {
	}

	_render() {
		render(template(this), this, {eventContext: this});
	}

});
endsnippet

snippet vanattr "VanillaJS attribute"
	static get observedAttributes() {
		return ['$2'];
	}

  /** @prop $2 {string} $3 */
	get $2() { return this.getAttribute('$2'); }
	set $2(val) { this.setAttribute('$2', val); }

	attributeChangedCallback(name, oldValue, newValue) {
		switch (name) {
			case '$2':
				break;
		}
	}
endsnippet

snippet vanprop "VanillaJS property"
	/** @prop $2 {string} $3 */
	get $2() { return this._$2 }
	set $2(val) { this._$2 = val; }
endsnippet

snippet vandoc "VanillaJS custome element docs."
/**
 * @module $1/$2
 * @description <h2><code>$2</code></h2>
 *
 * @evt
 *
 * @attr
 *
 * @example
 */
endsnippet

snippet cust "CustomEvent"
	this.dispatchEvent(new CustomEvent('$1', { detail: detail, bubbles: true }));
endsnippet

snippet vanele "VanillaJS+ElementSk element definition"
/**
 * @module $1/$2
 * @description <h2><code>$2</code></h2>
 *
 * @evt
 *
 * @attr
 *
 * @example
 */
import { html, render } from 'lit-html'
import { ElementSk } from '../../../infra-sk/modules/ElementSk'

const template = (ele) => html\`\`;

window.customElements.define('$2', class extends ElementSk {
	constructor() {
		super(template);
	}

	connectedCallback() {
		super.connectedCallback();
		this._render();
	}

	disconnectedCallback() {
	}

});
endsnippet

snippet fetch "fetch(...)"
fetch('$1', {
	method: 'POST',
	body: JSON.stringify($2),
	headers:{
		'Content-Type': 'application/json'
	}
}).then(jsonOrThrow)
endsnippet
