###########################################################################
#                            TextMate Snippets                            #
###########################################################################

global !p
def x(snip):
    if snip.ft.startswith("x"):
        snip.rv = '/'
    else:
        snip.rv = ""
endglobal

snippet cust "CustomEvent"
var detail = {$1};
this.dispatchEvent(new CustomEvent('change', {detail: detail}));
$0
endsnippet


snippet pretty "prettyprint"
<pre class=prettyprint><code>$1</code></pre>
$0
endsnippet

snippet pub "polymer 0.5 publish"
publish: {
  $1: {
    value: $2,
    reflect: true,
  },
},
endsnippet

#############
# JS        #
#############

snippet for "for (...) {...} (counting up)" b
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${VISUAL}$0
}
endsnippet

snippet ford "for (...) {...} (counting down, faster)" b
for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${VISUAL}$0
}
endsnippet

snippet fun "function (fun)"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet


snippet clos "Immediately-Invoked Closure"
(function () {
	$0
})();
endsnippet

snippet ae "ele.addEventListener"
$$$('#$1').addEventListener('$2', function(e) {
	$0
});
endsnippet

snippet ele "$$$('#id')."
$$$('#$1').$0
endsnippet

#############
# Shortcuts #
#############
snippet down "Down (down)"
&#x2193;
endsnippet

snippet enter "Enter (enter)"
&#x2305;
endsnippet

snippet escape "Escape (escape)"
&#x238B;
endsnippet

snippet shift "Shift (shift)"
&#x21E7;
endsnippet

snippet tab "Tab (tab)"
&#x21E5;
endsnippet

snippet up "Up (up)"
&#x2191;
endsnippet

snippet return "Return (return)"
&#x21A9;
endsnippet

snippet right "Right (right)"
&#x2192;
endsnippet

snippet left "Left (left)"
&#x2190;
endsnippet

snippet option "Option (option)"
&#x2325;
endsnippet

snippet co "HTML Comment"
<!-- $1 -->$0
endsnippet

#############
# HTML TAGS #
#############
snippet input "Input with Label"
<label for="${2:${1/[[:alpha:]]+|( )/(?1:_:\L$0)/g}}">$1</label><input type="${3:text/submit/hidden/button}" name="${4:$2}" value="$5"${6: id="${7:$2}"}`!p x(snip)`>

endsnippet

snippet input "<input>"
<input type="${1:text/submit/hidden/button}" name="${2:some_name}" value="$3"${4: id="${5:$2}"}`!p x(snip)`>
endsnippet


snippet opt "Option"
<option${1: value="${2:option}"}>${3:$2}</option>
endsnippet

snippet select "Select Box"
<select name="${1:some_name}" id="${2:$1}"${3:${4: multiple}${5: onchange="${6:}"}${7: size="${8:1}"}}>
	<option${9: value="${10:option1}"}>${11:$10}</option>
	<option${12: value="${13:option2}"}>${14:$13}</option>${15:}
	$0
</select>
endsnippet

snippet canvas "<canvas>"
<canvas id=${1:ID} width=${2:500} height=${3:500}>$0
endsnippet

snippet textarea "<textarea>"
<textarea name="${1:Name}" rows="${2:8}" cols="${3:40}">$0</textarea>
endsnippet

snippet mailto "<a mailto: >"
<a href="mailto:${1:joe@example.com}?subject=${2:feedback}">${3:email me}</a>
endsnippet

snippet base "<base>"
<base href="$1"${2: target="$3"}`!p x(snip)`>
endsnippet

snippet body "<body>"
<body id="${1:`!p
snip.rv = snip.fn and 'Hallo' or 'Nothin'
`}"${2: onload="$3"}>
	$0
</body>
endsnippet

snippet div "<div>"
<div>
  $0
</div>
endsnippet

snippet divi "<div id=>"
<div id=${1:ID}>
</div>
endsnippet

snippet form "<form>"
<form action="${1:`!p
snip.rv = (snip.basename or 'unnamed') + '_submit'
`}" method="${2:get}" accept-charset="utf-8">
	$0

	<p><input type="submit" value="Continue ‚Üí"`!p x(snip)`></p>
</form>
endsnippet

snippet h "<h[1-5]>" i
<h$1 id="${2/[\w\d]+|( )/(?1:_:\L$0\E)/g}${VISUAL/[\w\d]+|()/(?1:_:\L$0\E)/g}">${2}${VISUAL}</h$1>
endsnippet


snippet head "<head>"
<head>
	<meta http-equiv="Content-type" content="text/html; charset=utf-8"`!p x(snip)`>
	<title>${1:`!p snip.rv = snip.basename or "Page Title"`}</title>
	$0
</head>
endsnippet

snippet link "<link>"
<link rel="${1:stylesheet}" href="${2:/css/master.css}" type="text/css" media="${3:screen}">
endsnippet

snippet meta "<meta>"
<meta name="${1:name}" content="${2:content}"`!p x(snip)`>
endsnippet

snippet scriptsrc "script src..."
<script src="$1" type="text/javascript" charset="${3:utf-8}"></script>
endsnippet

snippet script "script"
<script type="text/javascript" charset="utf-8">
	$0
</script>
endsnippet

snippet css "style"
<style type="text/css" media="screen">
	$0
</style>
endsnippet

snippet table "table"
<table border="${1:0}"${2: cellspacing="${3:5}" cellpadding="${4:5}"}>
	<tr><th>${5:Header}</th></tr>
	<tr><td>${0:Data}</td></tr>
</table>
endsnippet

snippet img "Image"
<img src="$0"/>
endsnippet

snippet a "Link"
<a href="$1">${VISUAL}$0</a>
endsnippet

snippet p "paragraph" !
<p>${VISUAL}$0</p>
endsnippet

snippet b "bold"
<b>${VISUAL}$0</b>
endsnippet

snippet em "emphasis"
<em>${VISUAL}$0</em>
endsnippet

snippet code "code"
<code>${VISUAL}$0</code>
endsnippet

snippet str "strong"
<strong>${VISUAL}$0</strong>
endsnippet

snippet li "list item"
<li>$0</li>
endsnippet

snippet ul "unordered list"
<ul>
$0
</ul>
endsnippet

snippet ol "ordered list"
<ol>
$0
</ol>
endsnippet

snippet dl "definition list"
<dl>
  <dt>$1</dt>
  <dd>$2</dd>
</dl>
endsnippet

snippet dt "ordered list"
<dt>$1</dt>
<dd>$2</dd>
endsnippet

snippet td "table cell"
<td>$0</td>
endsnippet

snippet tr "table row"
<tr>$0</tr>
endsnippet

snippet fieldset "Fieldset"
<fieldset id="${1/[\w\d]+|( )/(?1:_:\L$0\E)/g}" ${2:class="${3:}"}>
	<legend>$1</legend>
	
	$0
</fieldset>
endsnippet

snippet movie "Embed QT movie (movie)" b
<object width="$2" height="$3" classid="clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B" codebase="http://www.apple.com/qtactivex/qtplugin.cab">
	<param name="src" value="$1"`!p x(snip)`>
	<param name="controller" value="$4"`!p x(snip)`>
	<param name="autoplay" value="$5"`!p x(snip)`>
	<embed src="${1:movie.mov}"
		width="${2:320}" height="${3:240}"
		controller="${4:true}" autoplay="${5:true}"
		scale="tofit" cache="true"
		pluginspage="http://www.apple.com/quicktime/download/"
	`!p x(snip)`>
</object>
endsnippet

snippet html "HTML Template"
<!DOCTYPE html>
<html>
<head>
    <title>${1}</title>
    <meta charset="utf-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=egde,chrome=1">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
  ${2}
</body>
</html>
endsnippet

snippet poly "Polymer element"
<!-- The <$1> custom element declaration.

  Attributes:
	Events:
	Methods:
-->
<polymer-element name="$1">
  <template>
	  $2
  </template>
  <script>
    Polymer({
      ready: function() {
			  $3
      }
    });
  </script>
</polymer-element>
endsnippet


snippet poly9 "Polymer 0.9+ element"
<!-- The <$1> custom element declaration.

  Attributes:
	Events:
	Methods:
-->

<dom-module id="$1">
  <style>
  </style>
  <template>
    $2
  </template>
</dom-module>

<script>
  Polymer({
    is: "$1",

    ready: function() {
    },

  });
</script>
endsnippet

snippet prop "Polymer 0.9+ properties"
properties: {
  $1: {
    type: String,
    value: "$2",
		reflectToAttribute: false,
		observer: "$1Change",
  },
},
endsnippet

snippet repeat "Polymer 0.9+ repeat template"
<template is="dom-repeat" items="{{$1}}">
  $0
</template>
endsnippet

snippet if "Polymer 0.9+ if template"
<template is="dom-if" if="{{$1}}">
  $0
</template>
endsnippet

snippet list "Polymer 1.0 listeners"
listeners: {
	"$1.tap": "_$1Tap",
	$0
},
endsnippet

snippet stamp "Stamp element"
<!-- The <$1> custom element declaration.

  Attributes:
	Events:
	Methods:
-->

<template id="$1">
  <host-content select="*"></host-content>
</template>

<script type="text/javascript" charset="utf-8">
  (function() {
    Stamp.newElement('$1', {
      createdCallback: function() {
			  Stamp.elementExpand(this);
      },
    });
  })();
</script>

endsnippet

snippet < "HTML element"
<$1></$1>
endsnippet

snippet G "G2"
ùîæ<sup>2</sup>$0
endsnippet

snippet R "R2"
‚Ñù<sup>2</sup>
endsnippet

snippet vec "vector"
<b>$1<sub>$2</sub></b>$0
endsnippet

snippet grid "cssgrid"
.$1 {
	grid-area: $2;
}

.$3 {
	grid-area: $4;
}

.container {
  display: grid;
	grid-template-columns: 2fr 1fr;
	grid-template-rows: 50px 1fr;
	grid-template-areas:
		"$1 $1"
		"$2 $2"
}
endsnippet

# vim:ft=snippets:
