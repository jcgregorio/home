snippet sort "sort"
type $1Slice []$1

func (p $1Slice) Len() int           { return len(p) }
func (p $1Slice) Less(i, j int) bool { return p[i] < p[j] }
func (p $1Slice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }
endsnippet

snippet main "main"
package main

import "fmt"

func main() {
	$0fmt.Println("Hello, 世界")
}
endsnippet

snippet testing "testing"
package $1

import (
	"testing"
)

${0}
endsnippet


snippet got "got"
if got, want := $1, $2; got != want {
	t.Errorf("$3: Got %v Want %v", got, want)
}
endsnippet

snippet ok "ok"
if $1, ok := $2[$3]; !ok {
	$4
}
endsnippet


snippet if "if "
if err != nil {
	$0
}
endsnippet

snippet ife "if err"
if err := $1;err != nil {
	$0
}
endsnippet

snippet ifo "if ok"
if $1, ok := $2[$3]; !ok {
	$0
}
endsnippet

snippet flags "flags"
// flags
var (
	$1 = flag.String("$1", "$2", "$3")
	$0
)
endsnippet

snippet enum "enum"
type $1 string

// $1 constants.
const (
	$2 $1 = "$3"
	$0
)
endsnippet


snippet tc "testcase"
	testCases := []struct {
		value    $1
		expected $2
		message  string
	}{
		{
			value:   $3,
			expected: $4,
			message: "$5",
		},
	}

	for _, tc := range testCases {
		if got, want := $6(tc.value), tc.expected; got!=want {
			t.Errorf("Failed case Got %v Want %v: %s", got, want, tc.message)
		}
	}
endsnippet

snippet xml "xml"
\`xml:"$1"\`
endsnippet

snippet datastore"datastore field"
\`datastore:"${1:displayName},noindex"\`
endsnippet

snippet test
	func Test${1:name}(t *testing.T) {
		testutils.SmallTest(t)
		${0:${VISUAL}}
	}
endsnippet
